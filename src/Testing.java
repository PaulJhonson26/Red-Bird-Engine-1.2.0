
import java.util.*;
import java.io.IOException;
public class Testing
{
	public static void main(String[] args) throws IOException
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing En-Passent White////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
//		Position aPosition = new Position(new Pawn(13, Colour.White));
//		aPosition.addPiece(new Pawn(52, Colour.Black));
//		aPosition.aLastMove = new lastMove(0, new NullPiece());
//		aPosition.addPiece(new King(61, Colour.Black));
//		Piece ePawn = aPosition.getPiece(13);
//		System.out.println(aPosition.getPiece(13).getClass().getName() + "wazza");
//		Piece dPawn = aPosition.getPiece(52);
//		Piece blackKing = aPosition.getPiece(61);
//		
//		aPosition.evaluateLegalMoves();
//		
//		
//		ePawn.printPiece();
//		dPawn.printPiece();
//		ePawn.printLegalMoves();
//		System.out.println("It is " + aPosition.getTurn() + "'s move");
//		aPosition.movePiece(ePawn,29);
//		ePawn.printPiece();
//		
//		aPosition.movePiece(blackKing, 62);
//		
//		aPosition.movePiece(ePawn,37);
//		
//		ePawn.printPiece();
//		
//		System.out.println("now move d pawn");
//		aPosition.movePiece(dPawn,36);
//		
//		dPawn.printPiece();
//		
//		ePawn.printPiece();
//		
//		ePawn.printLegalMoves();
//		
//		aPosition.movePiece(ePawn, 44); //notice that the d pawn gets deleted
//		
//		ePawn.printPiece();
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing En-Passent White////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing En-Passent Black////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
//		Position aPosition = new Position(new Pawn(53, Colour.Black));
//		aPosition.addPiece(new Pawn(12, Colour.White));
//		aPosition.aLastMove = new lastMove(0, new NullPiece());
//		aPosition.addPiece(new King(5, Colour.White));
//		Piece ePawn = aPosition.getPiece(53);
//		System.out.println(aPosition.getPiece(53).getClass().getName() + "wazza");
//		Piece dPawn = aPosition.getPiece(12);
//		Piece whiteKing = aPosition.getPiece(5);
//		
//		aPosition.evaluateLegalMoves();
//		
//		
//		ePawn.printPiece();
//		dPawn.printPiece();
//		ePawn.printLegalMoves();
//		System.out.println("It is " + aPosition.getTurn() + "'s move");
//		aPosition.movePiece(ePawn,37);
//		ePawn.printPiece();
//		
//		aPosition.movePiece(whiteKing, 6);
//		
//		aPosition.movePiece(ePawn,29);
//		
//		ePawn.printPiece();
//		
//		System.out.println("now move d pawn");
//		aPosition.movePiece(dPawn,28);
//		
//		dPawn.printPiece();
//		
//		ePawn.printPiece();
//		
//		ePawn.printLegalMoves();
//		
//		aPosition.movePiece(ePawn, 20); //notice that the d pawn gets deleted
//		
//		ePawn.printPiece();
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing En-Passent Black////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing General Moves///////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////

//		Position aPosition = new Position();
//		aPosition.aLastMove = new lastMove(0, new NullPiece());
//		aPosition.printBoard();
//		aPosition.evaluateLegalMoves();
//		for(Piece piece : aPosition.getBoard())
//		{
//				System.out.println(piece.getColour() +" "+ piece.getClass().getName());
//				piece.printLegalMoves();
//		}
//		
//		King whiteKing = aPosition.getKing(Colour.White);
//		King blackKing = aPosition.getKing(Colour.Black);
//		System.out.println("================= Move: e3 ===============");
//		aPosition.movePiece(aPosition.getPiece(13), 21); //e3
//		//System.out.println("x: " + aPosition.getPiece(21).getX() + "y: " + aPosition.getPiece(21).getY());
//		System.out.println("================= Move: f6 ===============");
//		aPosition.movePiece(aPosition.getPiece(54), 46); //f6
//		System.out.println("================= Move: Qh5+ =============");
//		aPosition.movePiece(aPosition.getPiece(4), 40); //Qh5+
//		aPosition.printBoard();
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing General Moves///////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Position Extremes (Corners)////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
			//Passed: Black Pawn, White Pawn, Knights, Bishops, Quuen King
		
//		Position aPosition = new Position(new King(64, Colour.White));
//		aPosition.evaluateLegalMoves();
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Position Extremes (Corners)////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Captures ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		 //Passed: Knight, Bishop, Rook, Pawn, Queen, King
//		
//		Position aPosition = new Position(new King(9, Colour.White));
//		Piece aPiece = new Bishop(18, Colour.Black);
//		aPosition.addPiece(aPiece);
//		aPosition.evaluateLegalMoves();
//		for(Piece piece : aPosition.getBoard())
//		{
//				System.out.println(piece.getColour() +" "+ piece.getClass().getName());
//				piece.printLegalMoves();
//		}
//		aPosition.movePiece(aPosition.getPiece(9), 18);
		
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Captures ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Promotion //////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
//		
//			Position aPosition = new Position(new Pawn(14, Colour.Black));
//			aPosition.evaluateLegalMoves();
//			for(Piece piece : aPosition.getBoard())
//			{
//					System.out.println(piece.getColour() +" "+ piece.getClass().getName());
//					piece.printLegalMoves();
//			}
//			aPosition.movePiece(aPosition.getPiece(14), 6);
			
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Promotion //////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
			
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Castling ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
			//Passed: White 0-0 & 0-0-0,  Black 0-0 & 0-0-0
//			Position aPosition = new Position(new King(5, Colour.White));
//			Knight aKnight = new Knight(7, Colour.White);
//			Rook aRook = new Rook(8, Colour.White);
//			Pawn aPawn = new Pawn(50, Colour.Black);
//			aPosition.addPiece(aKnight);
//			aPosition.addPiece(aRook);
//			aPosition.addPiece(aPawn);
//			
//			aPosition.evaluateLegalMoves();
//			
//			for(Piece piece : aPosition.getBoard())
//			{
//					System.out.println(piece.getColour() +" "+ piece.getClass().getName());
//					piece.printLegalMoves();
//			}
//			
//			aPosition.movePiece("g1","f3");
//			aPosition.movePiece("b7", "b5");
//			System.out.println("King Moves");
//			
//			aPosition.movePiece("e1", "g1");
//			System.out.println("King has Moved");
			
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing Castling ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing new move() /////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
//		
//		Position aPosition = new Position();
//		aPosition.evaluateLegalMoves();
//		aPosition.movePiece("d2", "d4");
//		aPosition.movePiece("b8", "f6");
//		aPosition.movePiece("e2", "e3");
//		aPosition.movePiece("g8", "f6");
//		aPosition.movePiece("b1", "c3");
//		aPosition.movePiece("d7", "d5");
//		aPosition.movePiece("f2", "f3");
//		aPosition.movePiece("c8", "f5");
//		aPosition.movePiece("e3", "e4");
//		aPosition.printBoard();
		
		/////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////Testing new move() /////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing fullGame ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
//		Position aPosition = new Position();
//		aPosition.evaluateLegalMoves();
//		
//		aPosition.movePiece("e2", "e4");
//		aPosition.movePiece("e7", "e5");
//		aPosition.movePiece("g1", "f3");
//		aPosition.movePiece("d7", "d6");
//		aPosition.movePiece("d2", "d4");
//		aPosition.movePiece("c8", "g4");
//		aPosition.movePiece("d4", "e5");
//		aPosition.movePiece("g4", "f3");
//		aPosition.movePiece("d1", "f3");
//		aPosition.movePiece("d6", "e5");
//		aPosition.movePiece("f1", "c4");
//		aPosition.movePiece("g8", "f6");
//		aPosition.movePiece("f3", "b3");
//		aPosition.movePiece("d8", "e7");
//		aPosition.movePiece("b1", "c3");
//		aPosition.movePiece("c7", "c6");
//		aPosition.movePiece("c1", "g5");
//		aPosition.movePiece("b7", "b5");
//		aPosition.movePiece("c3", "b5");
//		aPosition.movePiece("c6", "b5");
//		aPosition.movePiece("c4", "b5");
//		aPosition.movePiece("b8", "d7");
//		aPosition.movePiece("e1", "c1");
//		aPosition.movePiece("a8", "d8");
//		aPosition.movePiece("d1", "d7");
//		aPosition.movePiece("d8", "d7");
//		aPosition.movePiece("h1", "d1");
//		aPosition.movePiece("e7", "e6");
//		aPosition.movePiece("b5", "d7");
//		aPosition.movePiece("f6", "d7");
//		aPosition.movePiece("b3", "b8");
//		aPosition.movePiece("d7", "b8");
//		aPosition.movePiece("d1", "d8");
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing fullGame ///////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////Testing legalMoves /////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		
//		Position aPosition = new Position();
//		Knight aKnight = new Knight(2, Colour.White);
//		aPosition.addPiece(aKnight);
//		aPosition.evaluateLegalMoves();
//		aPosition.movePiece(aKnight, 19);
//
//		
			///////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////Testing legalMoves /////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////////////////////////
		
		
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////Testing new Positiong copy /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
		Position aPosition = new Position();
		Position newPosition = new Position(aPosition);

		newPosition.movePiece(newPosition.getBoard().get(10), 19);
		
		System.out.println("aPosition: ");
		aPosition.printBoard();
		System.out.println("newPosition: ");
		newPosition.printBoard();
		
		
		for(Piece piece : aPosition.getBoard())
		{
				System.out.println(piece.getColour() +" "+ piece.getClass().getName());
				System.out.println("size: " + piece.getLegalMoves().size());
				piece.printLegalMoves();
				
		}
		double eval = 0;
		eval = Double.POSITIVE_INFINITY;
		System.out.println(eval);
	}

}
